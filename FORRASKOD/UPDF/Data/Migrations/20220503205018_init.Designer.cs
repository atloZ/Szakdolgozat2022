// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UPDF.Data;

#nullable disable

namespace UPDF.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220503205018_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Auth")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Auth");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Auth");
                });

            modelBuilder.Entity("UPDF.Models.Csapat", b =>
                {
                    b.Property<int>("Azon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Azon"), 1L, 1);

                    b.HasKey("Azon");

                    b.ToTable("Csapat", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.Egyesulet", b =>
                {
                    b.Property<int>("Azon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Azon"), 1L, 1);

                    b.Property<string>("Nev")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rovidites")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Azon");

                    b.ToTable("Egyesulet", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.Kategoria", b =>
                {
                    b.Property<int>("Azon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Azon"), 1L, 1);

                    b.Property<string>("Megnevezes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Azon");

                    b.ToTable("Kategora", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.Korcsoport", b =>
                {
                    b.Property<int>("Azon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Azon"), 1L, 1);

                    b.Property<int>("Maximum")
                        .HasColumnType("int");

                    b.Property<string>("Megnevezes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Minimum")
                        .HasColumnType("int");

                    b.HasKey("Azon");

                    b.ToTable("Korcsoport", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.Nevezes", b =>
                {
                    b.Property<int>("Azon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Azon"), 1L, 1);

                    b.Property<int>("CsapatAzon")
                        .HasColumnType("int")
                        .HasColumnName("Csapat_Azon");

                    b.Property<int>("KategoriaAzon")
                        .HasColumnType("int")
                        .HasColumnName("Kategoria_Azon");

                    b.Property<int>("KorcsoportAzon")
                        .HasColumnType("int")
                        .HasColumnName("Korcsoport_Azon");

                    b.Property<string>("KoreoCim")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RogzitoAzon")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Rogzito_Azon");

                    b.Property<int>("VersenySzamAzon")
                        .HasColumnType("int")
                        .HasColumnName("VersenySzam_Azon");

                    b.Property<int>("VersenyzoAzon")
                        .HasColumnType("int")
                        .HasColumnName("Versenyzo_Azon");

                    b.Property<string>("ZenePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Azon");

                    b.HasIndex("CsapatAzon");

                    b.HasIndex("KategoriaAzon");

                    b.HasIndex("KorcsoportAzon");

                    b.HasIndex("RogzitoAzon");

                    b.HasIndex("VersenySzamAzon");

                    b.HasIndex("VersenyzoAzon");

                    b.ToTable("Nevezes", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.VersenySzam", b =>
                {
                    b.Property<int>("Azon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Azon"), 1L, 1);

                    b.Property<int>("Letszam")
                        .HasColumnType("int");

                    b.Property<string>("Megnevezes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Azon");

                    b.ToTable("VersenySzam", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.Versenyzo", b =>
                {
                    b.Property<int>("SirAzon")
                        .HasColumnType("int")
                        .HasColumnName("Sir_Azon");

                    b.Property<int>("EgyesuletAzon")
                        .HasColumnType("int")
                        .HasColumnName("Egyesulet_Azon");

                    b.Property<DateTime>("EngedelyErv")
                        .HasColumnType("date");

                    b.Property<int>("EngedelySzam")
                        .HasColumnType("int");

                    b.Property<string>("Nev")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SzulDatum")
                        .HasColumnType("date");

                    b.Property<string>("SzulHely")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SirAzon");

                    b.HasIndex("EgyesuletAzon");

                    b.HasIndex(new[] { "SirAzon" }, "IX_Versenyzo");

                    b.ToTable("Versenyzo", "Nevezes");
                });

            modelBuilder.Entity("UPDF.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("Date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UsernameChangeLimit")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UPDF.Models.Nevezes", b =>
                {
                    b.HasOne("UPDF.Models.Csapat", "CsapatAzonNavigation")
                        .WithMany()
                        .HasForeignKey("CsapatAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Nevezes_Csapat");

                    b.HasOne("UPDF.Models.Kategoria", "KategoriaAzonNavigation")
                        .WithMany()
                        .HasForeignKey("KategoriaAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Nevezes_Kategoria");

                    b.HasOne("UPDF.Models.Korcsoport", "KorcsoportAzonNavigation")
                        .WithMany()
                        .HasForeignKey("KorcsoportAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Nevezes_Korcsoport");

                    b.HasOne("UPDF.Models.ApplicationUser", "RogzitoAzonNavigation")
                        .WithMany()
                        .HasForeignKey("RogzitoAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Nevezes_Felhasznalo");

                    b.HasOne("UPDF.Models.VersenySzam", "VersenySzamAzonNavigation")
                        .WithMany()
                        .HasForeignKey("VersenySzamAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Nevezes_VersenySzam");

                    b.HasOne("UPDF.Models.Versenyzo", "VersenyzoAzonNavigation")
                        .WithMany()
                        .HasForeignKey("VersenyzoAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Nevezes_Versenyzo");

                    b.Navigation("CsapatAzonNavigation");

                    b.Navigation("KategoriaAzonNavigation");

                    b.Navigation("KorcsoportAzonNavigation");

                    b.Navigation("RogzitoAzonNavigation");

                    b.Navigation("VersenySzamAzonNavigation");

                    b.Navigation("VersenyzoAzonNavigation");
                });

            modelBuilder.Entity("UPDF.Models.Versenyzo", b =>
                {
                    b.HasOne("UPDF.Models.Egyesulet", "EgyesuletAzonNavigation")
                        .WithMany("Versenyzok")
                        .HasForeignKey("EgyesuletAzon")
                        .IsRequired()
                        .HasConstraintName("FK_Versenyzo_Egyesulet");

                    b.Navigation("EgyesuletAzonNavigation");
                });

            modelBuilder.Entity("UPDF.Models.Egyesulet", b =>
                {
                    b.Navigation("Versenyzok");
                });
#pragma warning restore 612, 618
        }
    }
}
